package es.jbp.juegos.mus.iu;

import es.jbp.juegos.mus.algoritmo.JugadorAlgoritmo;
import es.jbp.juegos.mus.enumerados.Accion;
import es.jbp.juegos.mus.enumerados.FaseJuego;
import es.jbp.juegos.mus.enumerados.Lance;
import es.jbp.juegos.mus.mensajes.MensajeTurno;
import es.jbp.juegos.mus.mensajes.MensajeDeJugador;
import es.jbp.juegos.mus.mensajes.MensajeTexto;
import es.jbp.juegos.mus.persistencia.Naipe;
import es.jbp.juegos.mus.recursos.RecursoMesa;
import java.util.List;
import es.jbp.juegos.mus.servicios.ListenerWebsocket;
import es.shs.comun.utiles.conversion.Conversion;
import es.shs.comun.utiles.recursos.GestorRecursos;
import es.shs.comun.utiles.swing.EtiquetaImagen;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.ImageIcon;

/**
 *
 * @author jorge
 */
public class PanelJugador extends javax.swing.JPanel implements ListenerWebsocket {

    private String nombreJugador;
    private int apuesta = 2;
    private int indice;
    private RecursoMesa recursoMesa;
    private List<Integer> descartes = new ArrayList<>();
    private List<Naipe> cartas;

    private EtiquetaImagen[] labelCarta = new EtiquetaImagen[4];
    private boolean permitirDescarte;

    private JugadorAlgoritmo jugadorAlgoritmo;

    /**
     * Creates new form PanelJugador
     */
    public PanelJugador() {
        initComponents();

        labelCarta[0] = labelCarta1;
        labelCarta[1] = labelCarta2;
        labelCarta[2] = labelCarta3;
        labelCarta[3] = labelCarta4;

        actualizarBotones(null);
    }

    public JugadorAlgoritmo getJugadorAlgoritmo() {
        return jugadorAlgoritmo;
    }

    public void setJugadorAlgoritmo(JugadorAlgoritmo jugadorAlgoritmo) {
        this.jugadorAlgoritmo = jugadorAlgoritmo;
    }

    public void setRecursoMesa(RecursoMesa recursoMesa) {
        this.recursoMesa = recursoMesa;

        recursoMesa.agregarListenerJugador(nombreJugador, this);

        solicitarEntrarEnMesa();
    }

    public String getNombreJugador() {
        return nombreJugador;
    }

    public void setNombreJugador(String nombreJugador, int indice) {
        this.nombreJugador = nombreJugador;
        this.indice = indice;
        labelNombre.setText(nombreJugador);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelNombre = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        textMensaje = new javax.swing.JTextField();
        botonEntrar = new javax.swing.JButton();
        panelBotones = new javax.swing.JPanel();
        botonDescarte = new javax.swing.JButton();
        botonMus = new javax.swing.JButton();
        botonCorto = new javax.swing.JButton();
        botonNoQuiero = new javax.swing.JButton();
        botonQuiero = new javax.swing.JButton();
        botonPaso = new javax.swing.JButton();
        botonEnvido = new javax.swing.JButton();
        botonOrdago = new javax.swing.JButton();
        panelCentral = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 0), new java.awt.Dimension(8, 32767));
        panelCartas = new javax.swing.JPanel();
        labelCarta1 = new es.shs.comun.utiles.swing.EtiquetaImagen();
        labelCarta2 = new es.shs.comun.utiles.swing.EtiquetaImagen();
        labelCarta3 = new es.shs.comun.utiles.swing.EtiquetaImagen();
        labelCarta4 = new es.shs.comun.utiles.swing.EtiquetaImagen();
        jScrollPane1 = new javax.swing.JScrollPane();
        textInformacion = new javax.swing.JTextArea();
        labelPuntos = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(2147483647, 30));
        jPanel1.setMinimumSize(new java.awt.Dimension(52, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(105, 30));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        labelNombre.setText("Nombre");
        jPanel1.add(labelNombre);
        jPanel1.add(filler2);

        textMensaje.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textMensaje.setText("jTextField1");
        textMensaje.setMaximumSize(new java.awt.Dimension(2147483647, 30));
        textMensaje.setPreferredSize(new java.awt.Dimension(60, 25));
        jPanel1.add(textMensaje);

        botonEntrar.setText("Entrar");
        botonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEntrarActionPerformed(evt);
            }
        });
        jPanel1.add(botonEntrar);

        add(jPanel1);

        panelBotones.setMaximumSize(new java.awt.Dimension(99999, 30));
        panelBotones.setMinimumSize(new java.awt.Dimension(200, 30));
        panelBotones.setPreferredSize(new java.awt.Dimension(300, 30));
        panelBotones.setRequestFocusEnabled(false);
        panelBotones.setLayout(new javax.swing.BoxLayout(panelBotones, javax.swing.BoxLayout.LINE_AXIS));

        botonDescarte.setText("Descarte");
        botonDescarte.setMaximumSize(new java.awt.Dimension(81, 23));
        botonDescarte.setMinimumSize(new java.awt.Dimension(81, 23));
        botonDescarte.setPreferredSize(new java.awt.Dimension(81, 23));
        botonDescarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDescarteActionPerformed(evt);
            }
        });
        panelBotones.add(botonDescarte);

        botonMus.setText("Mus");
        botonMus.setMaximumSize(new java.awt.Dimension(81, 23));
        botonMus.setMinimumSize(new java.awt.Dimension(81, 23));
        botonMus.setPreferredSize(new java.awt.Dimension(81, 23));
        botonMus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMusActionPerformed(evt);
            }
        });
        panelBotones.add(botonMus);

        botonCorto.setText("Corto");
        botonCorto.setMaximumSize(new java.awt.Dimension(81, 23));
        botonCorto.setMinimumSize(new java.awt.Dimension(81, 23));
        botonCorto.setPreferredSize(new java.awt.Dimension(81, 23));
        botonCorto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCortoActionPerformed(evt);
            }
        });
        panelBotones.add(botonCorto);

        botonNoQuiero.setText("No quiero");
        botonNoQuiero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNoQuieroActionPerformed(evt);
            }
        });
        panelBotones.add(botonNoQuiero);

        botonQuiero.setText("Quiero");
        botonQuiero.setMaximumSize(new java.awt.Dimension(81, 23));
        botonQuiero.setMinimumSize(new java.awt.Dimension(81, 23));
        botonQuiero.setPreferredSize(new java.awt.Dimension(81, 23));
        botonQuiero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonQuieroActionPerformed(evt);
            }
        });
        panelBotones.add(botonQuiero);

        botonPaso.setText("Paso");
        botonPaso.setMaximumSize(new java.awt.Dimension(81, 23));
        botonPaso.setMinimumSize(new java.awt.Dimension(81, 23));
        botonPaso.setPreferredSize(new java.awt.Dimension(81, 23));
        botonPaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPasoActionPerformed(evt);
            }
        });
        panelBotones.add(botonPaso);

        botonEnvido.setText("Envido");
        botonEnvido.setMaximumSize(new java.awt.Dimension(81, 23));
        botonEnvido.setMinimumSize(new java.awt.Dimension(81, 23));
        botonEnvido.setPreferredSize(new java.awt.Dimension(81, 23));
        botonEnvido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnvidoActionPerformed(evt);
            }
        });
        panelBotones.add(botonEnvido);

        botonOrdago.setText("Ordago");
        botonOrdago.setMaximumSize(new java.awt.Dimension(81, 23));
        botonOrdago.setMinimumSize(new java.awt.Dimension(81, 23));
        botonOrdago.setPreferredSize(new java.awt.Dimension(81, 23));
        botonOrdago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOrdagoActionPerformed(evt);
            }
        });
        panelBotones.add(botonOrdago);

        add(panelBotones);

        panelCentral.setLayout(new javax.swing.BoxLayout(panelCentral, javax.swing.BoxLayout.LINE_AXIS));
        panelCentral.add(filler3);

        labelCarta1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jbp/juegos/naipes/reverso.jpg"))); // NOI18N
        labelCarta1.setPreferredSize(new java.awt.Dimension(90, 120));
        labelCarta1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCarta1MouseClicked(evt);
            }
        });
        panelCartas.add(labelCarta1);

        labelCarta2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jbp/juegos/naipes/reverso.jpg"))); // NOI18N
        labelCarta2.setPreferredSize(new java.awt.Dimension(90, 120));
        labelCarta2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCarta2MouseClicked(evt);
            }
        });
        panelCartas.add(labelCarta2);

        labelCarta3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jbp/juegos/naipes/reverso.jpg"))); // NOI18N
        labelCarta3.setPreferredSize(new java.awt.Dimension(90, 120));
        labelCarta3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCarta3MouseClicked(evt);
            }
        });
        panelCartas.add(labelCarta3);

        labelCarta4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/jbp/juegos/naipes/reverso.jpg"))); // NOI18N
        labelCarta4.setPreferredSize(new java.awt.Dimension(90, 120));
        labelCarta4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCarta4MouseClicked(evt);
            }
        });
        panelCartas.add(labelCarta4);

        panelCentral.add(panelCartas);

        textInformacion.setColumns(20);
        textInformacion.setRows(5);
        jScrollPane1.setViewportView(textInformacion);

        panelCentral.add(jScrollPane1);

        add(panelCentral);

        labelPuntos.setText("Puntos:");
        add(labelPuntos);
    }// </editor-fold>//GEN-END:initComponents

    private void botonMusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMusActionPerformed
        realizarAccion(Accion.DAR_MUS);
    }//GEN-LAST:event_botonMusActionPerformed

    private void botonCortoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCortoActionPerformed
        realizarAccion(Accion.CORTAR);
    }//GEN-LAST:event_botonCortoActionPerformed

    private void botonDescarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDescarteActionPerformed
        realizarAccion(Accion.DESCARTAR);
    }//GEN-LAST:event_botonDescarteActionPerformed

    private void botonPasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPasoActionPerformed
        realizarAccion(Accion.PASAR);
    }//GEN-LAST:event_botonPasoActionPerformed

    private void botonEnvidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnvidoActionPerformed
        realizarAccion(Accion.ENVIDAR);
    }//GEN-LAST:event_botonEnvidoActionPerformed

    private void botonOrdagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOrdagoActionPerformed
        realizarAccion(Accion.LANZAR_ORDAGO);
    }//GEN-LAST:event_botonOrdagoActionPerformed

    private void botonQuieroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonQuieroActionPerformed
        realizarAccion(Accion.QUERER);
    }//GEN-LAST:event_botonQuieroActionPerformed

    private void botonNoQuieroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNoQuieroActionPerformed
        realizarAccion(Accion.NO_QUERER);
    }//GEN-LAST:event_botonNoQuieroActionPerformed

    private void botonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEntrarActionPerformed
        solicitarEntrarEnMesa();
    }//GEN-LAST:event_botonEntrarActionPerformed

    private void labelCarta1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCarta1MouseClicked
        clickEnCarta(0);
    }//GEN-LAST:event_labelCarta1MouseClicked

    private void labelCarta2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCarta2MouseClicked
        clickEnCarta(1);
    }//GEN-LAST:event_labelCarta2MouseClicked

    private void labelCarta3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCarta3MouseClicked
        clickEnCarta(2);
    }//GEN-LAST:event_labelCarta3MouseClicked

    private void labelCarta4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCarta4MouseClicked
        clickEnCarta(3);
    }//GEN-LAST:event_labelCarta4MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCorto;
    private javax.swing.JButton botonDescarte;
    private javax.swing.JButton botonEntrar;
    private javax.swing.JButton botonEnvido;
    private javax.swing.JButton botonMus;
    private javax.swing.JButton botonNoQuiero;
    private javax.swing.JButton botonOrdago;
    private javax.swing.JButton botonPaso;
    private javax.swing.JButton botonQuiero;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private es.shs.comun.utiles.swing.EtiquetaImagen labelCarta1;
    private es.shs.comun.utiles.swing.EtiquetaImagen labelCarta2;
    private es.shs.comun.utiles.swing.EtiquetaImagen labelCarta3;
    private es.shs.comun.utiles.swing.EtiquetaImagen labelCarta4;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelPuntos;
    private javax.swing.JPanel panelBotones;
    private javax.swing.JPanel panelCartas;
    private javax.swing.JPanel panelCentral;
    private javax.swing.JTextArea textInformacion;
    private javax.swing.JTextField textMensaje;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mensajeRecibido(Object objeto) {

        if (objeto instanceof MensajeTurno) {
            MensajeTurno mensaje = (MensajeTurno) objeto;
            boolean esMiTurno = Objects.equals(mensaje.getNombreJugadorTurno(), getNombreJugador());

            System.out.println(getNombreJugador() + " recibe un mensaje " + (esMiTurno ? " de turno" : " de espera"));

            FaseJuego faseJuego = mensaje.getFaseJuego();
            Lance lance = mensaje.getLance();
            //String nombreJugador = mensaje.getNombreJugador();
            if (faseJuego != null) {
                textMensaje.setText((lance == null ? "" : lance + " ") + faseJuego.toString());
            }

            actualizarControlesTurno(esMiTurno, faseJuego);
            mostrarPuntuacion(mensaje);

            if (mensaje.getCartas() != null) {
                mostarCartas(mensaje.getCartas());
            }
        } else if (objeto instanceof MensajeTexto) {
            MensajeTexto mensajeTexto = (MensajeTexto) objeto;
            String nombreJugador = mensajeTexto.getNombreJugadorRemitente();

            String texto = mensajeTexto.getTexto();
            if (nombreJugador != null) {
                texto = nombreJugador + ": " + texto;
            }
            textMensaje.setText(texto);
            informacion(texto);
        }

        if (jugadorAlgoritmo != null) {
            jugadorAlgoritmo.mensajeRecibido(objeto);
        }
    }

    public void realizarAccion(Accion accion) {
        realizarAccion(accion, apuesta, descartes);
    }

    public void realizarAccion(Accion accion, int apuesta, List<Integer> descartes) {
        textMensaje.setText("");

        MensajeDeJugador mensajeJugador = new MensajeDeJugador();
        mensajeJugador.setNombreJugadorDestinatario(nombreJugador);
        mensajeJugador.setAccion(accion);
        mensajeJugador.setApuesta(apuesta);
        if (descartes != null && !descartes.isEmpty()) {
            mensajeJugador.setDescartes(descartes.stream().mapToInt(Integer::intValue).toArray());
        }
        try {
            // TODO: esto se enviará por el web-socket
            recursoMesa.mensajeRecibido(mensajeJugador);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        actualizarControlesTurno(false, null);
    }

    private void actualizarBotones(FaseJuego faseJuego) {
        botonMus.setVisible(sePuedeRealizar(faseJuego, Accion.DAR_MUS));
        botonCorto.setVisible(sePuedeRealizar(faseJuego, Accion.CORTAR));
        botonDescarte.setVisible(sePuedeRealizar(faseJuego, Accion.DESCARTAR));
        botonEnvido.setVisible(sePuedeRealizar(faseJuego, Accion.ENVIDAR));
        botonNoQuiero.setVisible(sePuedeRealizar(faseJuego, Accion.NO_QUERER));
        botonQuiero.setVisible(sePuedeRealizar(faseJuego, Accion.QUERER));
        botonPaso.setVisible(sePuedeRealizar(faseJuego, Accion.PASAR));
        botonOrdago.setVisible(sePuedeRealizar(faseJuego, Accion.LANZAR_ORDAGO));

        permitirDescarte = faseJuego == FaseJuego.DESCARTE;
    }

    private boolean sePuedeRealizar(FaseJuego faseJuego, Accion accion) {
        if (faseJuego == null || accion == null) { // TODO: || jugadorAlgoritmo != null) {
            return false;
        }
        return faseJuego.getAcciones().contains(accion);
    }

    public void mostarCartas(List<Naipe> cartas) {
        descartes.clear();
        this.cartas = cartas;
        for (int i = 0; i < 4; i++) {
            actualizarImagenCarta(i);
        }
    }

    public void informacion(String mensaje) {
        if (Conversion.isBlank(mensaje)) {
            return;
        }
        textInformacion.append(mensaje);
        textInformacion.append("\n");
        textInformacion.setCaretPosition(textInformacion.getDocument().getLength());
    }

    private void solicitarEntrarEnMesa() {
        boolean ok = recursoMesa.solicitarEntrada(nombreJugador, indice);
        if (!ok) {
            textMensaje.setText("No ha podido entrar en la mesa");
            return;
        }
        botonEntrar.setVisible(false);
    }

    private void mostrarPuntuacion(MensajeTurno mensaje) {
        labelPuntos.setText(mensaje.getPuntuacionNosotros() + " - " + mensaje.getPuntuacionEllos());
    }

    private void clickEnCarta(int i) {
        if (!permitirDescarte) {
            return;
        }

        if (descartes.contains(i)) {
            descartes.remove(descartes.indexOf(i));
        } else {
            descartes.add(i);
        }
        actualizarImagenCarta(i);
    }

    private void actualizarImagenCarta(int i) {

        boolean descartada = descartes.contains(i);
        String nombreImagen;
        if (!descartada && i < cartas.size()) {
            Naipe carta = cartas.get(i);
            int numero = carta.getNumero();
            if (numero >= 8) {
                numero += 2;
            }
            String letra = carta.getPalo().toString().substring(0, 1).toLowerCase();
            nombreImagen = new DecimalFormat("00").format(numero) + letra + "_";
        } else {
            nombreImagen = "reverso";
        }
        ImageIcon imagen = GestorRecursos.getInstancia().getRecursoImagen("/es/jbp/juegos/naipes/" + nombreImagen + ".jpg");
        labelCarta[i].setIcon(imagen);
    }

    private void actualizarControlesTurno(boolean esMiTurno, FaseJuego faseJuego) {
        if (esMiTurno) {
            actualizarBotones(faseJuego);
            textMensaje.setBackground(Color.GREEN);
        } else {
            textMensaje.setBackground(Color.WHITE);
            actualizarBotones(null);
        }
    }

}
